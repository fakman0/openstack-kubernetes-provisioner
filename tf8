#!/bin/bash

# Colors for terminal output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Function to display usage information
show_usage() {
  echo -e "${YELLOW}Usage: $0 [COMMAND]${NC}"
  echo -e "Simplifies Terraform operations for OpenStack Kubernetes deployment"
  echo
  echo -e "Commands:"
  echo -e "  ${GREEN}init${NC}     - Initialize Terraform working directory"
  echo -e "  ${GREEN}plan${NC}     - Show execution plan"
  echo -e "  ${GREEN}deploy${NC}   - Deploy the infrastructure (runs init, plan, and apply)"
  echo -e "  ${GREEN}remove${NC}   - Remove all created resources"
  echo -e "  ${GREEN}destroy${NC}  - Same as remove"
  echo -e "  ${GREEN}state${NC}    - List resources in the Terraform state"
  echo -e "  ${GREEN}output${NC}   - Show output values"
  echo -e "  ${GREEN}help${NC}     - Show this help message"
  echo
}

# Function to check if terraform.tfvars exists
check_tfvars() {
  if [ ! -f "terraform.tfvars" ]; then
    echo -e "${RED}Error: terraform.tfvars file not found.${NC}"
    echo -e "Please create a terraform.tfvars file with your OpenStack credentials and configuration."
    echo -e "Example:"
    echo -e "${YELLOW}openstack_auth_url    = \"https://your-openstack-url:5000/v3\""
    echo -e "openstack_user_name   = \"your-username\""
    echo -e "openstack_tenant_name = \"your-project\""
    echo -e "openstack_password    = \"your-password\""
    echo -e "openstack_region      = \"your-region\""
    echo -e "image_id              = \"your-image-id\""
    echo -e "ssh_public_key        = \"ssh-rsa AAAA...\"${NC}"
    exit 1
  fi
}

# Function to init terraform
terraform_init() {
  echo -e "${YELLOW}Initializing Terraform...${NC}"
  terraform init
  if [ $? -ne 0 ]; then
    echo -e "${RED}Terraform initialization failed.${NC}"
    exit 1
  fi
  echo -e "${GREEN}Terraform initialization completed successfully.${NC}"
}

# Function to plan terraform
terraform_plan() {
  echo -e "${YELLOW}Planning Terraform deployment...${NC}"
  terraform plan -out=tfplan
  if [ $? -ne 0 ]; then
    echo -e "${RED}Terraform plan failed.${NC}"
    exit 1
  fi
  echo -e "${GREEN}Terraform plan completed successfully.${NC}"
}

# Function to apply terraform
terraform_apply() {
  echo -e "${YELLOW}Applying Terraform deployment...${NC}"
  terraform apply tfplan
  if [ $? -ne 0 ]; then
    echo -e "${RED}Terraform apply failed.${NC}"
    exit 1
  fi
  echo -e "${GREEN}Terraform apply completed successfully.${NC}"
  
  # Clean up the plan file
  rm -f tfplan
  
  # Show outputs
  terraform_output
}

# Function to destroy terraform
terraform_destroy() {
  echo -e "${YELLOW}Are you sure you want to destroy all resources? (yes/no)${NC}"
  read -r answer
  if [ "$answer" != "yes" ]; then
    echo -e "${RED}Terraform destroy cancelled.${NC}"
    exit 0
  fi
  
  echo -e "${YELLOW}Destroying Terraform resources...${NC}"
  terraform destroy -auto-approve
  if [ $? -ne 0 ]; then
    echo -e "${RED}Terraform destroy failed.${NC}"
    exit 1
  fi
  echo -e "${GREEN}Terraform destroy completed successfully.${NC}"
}

# Function to show terraform state
terraform_state() {
  echo -e "${YELLOW}Listing resources in Terraform state...${NC}"
  terraform state list
  if [ $? -ne 0 ]; then
    echo -e "${RED}Terraform state list failed.${NC}"
    exit 1
  fi
}

# Function to show terraform outputs
terraform_output() {
  echo -e "${YELLOW}Terraform outputs:${NC}"
  terraform output
  if [ $? -ne 0 ]; then
    echo -e "${RED}Terraform output failed.${NC}"
    exit 1
  fi
}

# Main script execution
if [ $# -eq 0 ]; then
  show_usage
  exit 1
fi

case "$1" in
  init)
    terraform_init
    ;;
  plan)
    check_tfvars
    terraform_init
    terraform_plan
    ;;
  deploy)
    check_tfvars
    terraform_init
    terraform_plan
    terraform_apply
    ;;
  remove|destroy)
    check_tfvars
    terraform_init
    terraform_destroy
    ;;
  state)
    terraform_state
    ;;
  output)
    terraform_output
    ;;
  help)
    show_usage
    ;;
  *)
    echo -e "${RED}Unknown command: $1${NC}"
    show_usage
    exit 1
    ;;
esac

exit 0
